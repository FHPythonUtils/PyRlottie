name: Build and upload to PyPI

on:
  release:
    types:
      - published
  # push:

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Build sdist
        run: pipx run build --sdist

      - name: Test sdist
        run: |
          python -m pip install dist/pyrlottie-*.tar.gz
          pip install pytest imgcompare
          pytest

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-sdist
          path: dist/*.tar.gz

  build_wheels:
    name: Build wheels on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            arch: x64
            cibw_archs_windows: AMD64
            cibw_build: "cp38* pp*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=x86_64
          - os: windows-2019
            arch: x86
            cibw_archs_windows: x86
            cibw_build: "cp38*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=x86
          - os: windows-2019
            arch: arm64
            cibw_archs_windows: ARM64
            cibw_build: "cp39*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=armv8
          - os: macos-12
            arch: x64
            cibw_archs_macos: x86_64
            cibw_build: "cp38* pp*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=x86_64
          - os: macos-14
            arch: arm64
            cibw_archs_macos: arm64
            cibw_build: "cp38* pp*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=armv8
          - os: ubuntu-20.04
            arch: x64
            cibw_archs_linux: x86_64
            cibw_build: "cp38* pp*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=x86_64
          - os: ubuntu-20.04
            arch: x86
            cibw_archs_linux: i686
            cibw_build: "cp38* pp*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=x86
          - os: ubuntu-20.04
            arch: arm64
            cibw_archs_linux: aarch64
            cibw_build: "cp38* pp*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=armv8
          - os: ubuntu-20.04
            arch: ppc64le
            cibw_archs_linux: ppc64le
            cibw_build: "cp38*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=ppc64le
          - os: ubuntu-20.04
            arch: s390x
            cibw_archs_linux: s390x
            cibw_build: "cp38*"
            cibw_environment: PYRLOTTIE_COMPILE_TARGET=s390x

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      
      - name: Install python packages
        run: pip install abi3audit patch

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.17.0
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_archs_windows }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs_macos }}
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs_linux }}
          CIBW_ENVIRONMENT: ${{ matrix.cibw_environment }}
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_TEST_REQUIRES: pytest imgcompare
          CIBW_BEFORE_TEST: pip install --only-binary ":all:" Pillow numpy; true
          CIBW_BEFORE_TEST_WINDOWS: pip install --only-binary ":all:" Pillow numpy || VER>NUL
          CIBW_TEST_COMMAND: pytest {package}/tests
          CIBW_TEST_SKIP: "pp* *-*linux_{ppc64le,s390x} *-musllinux_i686"
      
      - name: abi3audit
        run: abi3audit $(ls ./wheelhouse/*.whl) --debug --verbose

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.os }}-${{ matrix.arch }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          pattern: artifact-*
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}